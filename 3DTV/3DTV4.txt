import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { CSS3DRenderer, CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';

const ThreeDTv = () => {
  const mountRef = useRef(null);
  const cssMountRef = useRef(null);

  useEffect(() => {
    let scene, camera, renderer, cssRenderer, tv, cssScene;

    function init() {
      scene = new THREE.Scene();
      cssScene = new THREE.Scene();

      // 배경색을 흰색으로 설정
      scene.background = new THREE.Color(0xffffff);

      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, 0, 7);

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      mountRef.current.appendChild(renderer.domElement);

      cssRenderer = new CSS3DRenderer();
      cssRenderer.setSize(window.innerWidth, window.innerHeight);
      cssMountRef.current.appendChild(cssRenderer.domElement);

      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);
      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(5, 5, 5);
      scene.add(directionalLight);

      createTV();

      const controls = new OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.25;

      window.addEventListener('resize', onWindowResize, false);

      animate();
    }

    function createTV() {
      const frameGeometry = new THREE.BoxGeometry(4, 3, 0.2);
      const frameMaterial = new THREE.MeshPhongMaterial({ color: 0x000000 });
      tv = new THREE.Mesh(frameGeometry, frameMaterial);
      scene.add(tv);

      const screenGeometry = new THREE.PlaneGeometry(3.8, 2.8);
      const screenMaterial = new THREE.MeshBasicMaterial({ opacity: 0, transparent: true });
      const screenMesh = new THREE.Mesh(screenGeometry, screenMaterial);
      screenMesh.position.z = 0.11;
      tv.add(screenMesh);

      const iframe = document.createElement('iframe');
      iframe.style.width = '380px';
      iframe.style.height = '280px';
      iframe.style.border = '0px';
      iframe.allow = 'autoplay; encrypted-media';
      iframe.src = 'https://www.youtube.com/embed/TW9d8vYrVFQ?autoplay=1&mute=1&controls=0&showinfo=0&modestbranding=1&rel=0&loop=1&playlist=TW9d8vYrVFQ';

      /**
       * URL Parameters:
       * autoplay=1: 자동 재생
       * mute=1: 음소거
       * controls=0: 제어 요소 숨김
       * showinfo=0: 비디오 정보 숨김
       * modestbranding=1: YouTube 로고 숨김
       * rel=0: 관련 동영상 숨김
       * loop=1: 반복 재생
       * playlist=TW9d8vYrVFQ: 비디오 반복 재생을 위해 필요한 매개변수
       */

      const object = new CSS3DObject(iframe);
      object.position.copy(screenMesh.position);
      object.scale.multiplyScalar(0.01);  // 스케일 설정
      object.element.style.pointerEvents = 'none';  // iframe의 마우스 이벤트 비활성화
      cssScene.add(object);
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
      cssRenderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
      cssRenderer.render(cssScene, camera);
    }

    init();

    return () => {
      window.removeEventListener('resize', onWindowResize);
      while (mountRef.current.firstChild) {
        mountRef.current.removeChild(mountRef.current.firstChild);
      }
      while (cssMountRef.current.firstChild) {
        cssMountRef.current.removeChild(cssMountRef.current.firstChild);
      }
    };
  }, []);

  return (
    <>
      <div ref={mountRef}></div>
      <div ref={cssMountRef} style={{ position: 'absolute', top: 0, left: 0, pointerEvents: 'none' }}></div>
    </>
  );
};

export default ThreeDTv;
